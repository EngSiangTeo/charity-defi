{"id":"2c8aa37c2d78892a0f77f6181aa584b1","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"","input":{"language":"Solidity","sources":{"contracts/CharityToken.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract CharityToken is ERC20 {\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) ERC20(name_, symbol_) {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public returns (bool) {\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"contracts/MyPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport { IPaymaster, ExecutionResult } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol';\r\nimport { IPaymasterFlow } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol';\r\nimport { TransactionHelper, Transaction } from '@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol';\r\n\r\nimport '@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol';\r\n\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract MyPaymaster is IPaymaster {\r\n    uint256 constant PRICE_FOR_PAYING_FEES = 1;\r\n\r\n    address public allowedToken;\r\n\r\n    modifier onlyBootloader() {\r\n        require(msg.sender == BOOTLOADER_FORMAL_ADDRESS, \"Only bootloader can call this method\");\r\n        // Continure execution if called from the bootloader.\r\n        _;\r\n    }\r\n\r\n    constructor(address _erc20) {\r\n        allowedToken = _erc20;\r\n    }\r\n\r\n    function validateAndPayForPaymasterTransaction(bytes32 _txHash, bytes32 _suggestedSignedHash, Transaction calldata _transaction) external payable override onlyBootloader returns (bytes memory context) {\r\n        require(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\r\n\r\n        bytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\r\n        if (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\r\n            (address token, uint256 minAllowance, bytes memory data) = abi.decode(_transaction.paymasterInput[4:], (address, uint256, bytes));\r\n\r\n            require(token == allowedToken, \"Invalid token\");\r\n            require(minAllowance >= 1, \"Min allowance too low\");\r\n\r\n            address userAddress = address(uint160(_transaction.from));\r\n            address thisAddress = address(this);\r\n\r\n            uint256 providedAllowance = IERC20(token).allowance(userAddress, thisAddress);\r\n            require(providedAllowance >= PRICE_FOR_PAYING_FEES, \"The user did not provide enough allowance\");\r\n\r\n            // Note, that while the minimal amount of ETH needed is tx.ergsPrice * tx.ergsLimit,\r\n            // neither paymaster nor account are allowed to access this context variable.\r\n            uint256 requiredETH = _transaction.ergsLimit * _transaction.maxFeePerErg;\r\n\r\n            // Pulling all the tokens from the user\r\n            IERC20(token).transferFrom(userAddress, thisAddress, 1);\r\n            // The bootloader never returns any data, so it can safely be ignored here.\r\n            (bool success, ) = payable(BOOTLOADER_FORMAL_ADDRESS).call{value: requiredETH}(\"\");\r\n            require(success, \"Failed to transfer funds to the bootloader\");\r\n        } else {\r\n            revert(\"Unsupported paymaster flow\");\r\n        }\r\n    }\r\n\r\n    function postOp(\r\n        bytes calldata _context,\r\n        Transaction calldata _transaction,\r\n        bytes32 _txHash,\r\n        bytes32 _suggestedSignedHash,\r\n        ExecutionResult _txResult,\r\n        uint256 _maxRefundedErgs\r\n    ) external payable onlyBootloader {\r\n        // This contract does not support any refunding logic\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport './RLPEncoder.sol';\nimport './Constants.sol';\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IPaymasterFlow.sol\";\n\n// TODO: change it to the `0x80`, must be changed atomically with the server.\n/// @dev Denotes the first byte of the special zkSync's EIP-712-signed transaction.\nuint8 constant EIP_712_TX_TYPE = 0x71;\n\n/// @dev Denotes the first byte of some legacy transaction, which type is unknown to the server.\nuint8 constant LEGACY_TX_TYPE = 0x0;\nuint8 constant EIP_1559_TX_TYPE = 0x02;\n\nstruct Transaction {\n\tuint256 txType;\n\tuint256 from;\n\tuint256 to;\n\tuint256 ergsLimit;\n\tuint256 ergsPerPubdataByteLimit;\n\tuint256 maxFeePerErg;\n\tuint256 maxPriorityFeePerErg;\n\tuint256 paymaster;\n\t// In the future, we might want to add some\n\t// new fields to the struct. The `txData` struct\n\t// is to be passed to account and any changes to its structure\n\t// would mean a breaking change to these accounts. In order to prevent this,\n\t// we should keep some fields as \"reserved\".\n\t// It is also recommneded that their length is fixed, since\n\t// it would allow easier proof integration (in case we will need\n\t// some special circuit for preprocessing transactions).\n\tuint256[6] reserved;\n\tbytes data;\n\tbytes signature;\n\tbytes32[] factoryDeps;\n\tbytes paymasterInput;\n\t// Reserved dynamic type for the future use-case. Using it should be avoided,\n\t// But it is still here, just in case we want to enable some additional functionality.\n\tbytes reservedDynamic;\n}\n\nlibrary TransactionHelper {\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n\n\tbytes32 constant EIP712_TRANSACTION_TYPE_HASH =\n\t\tkeccak256(\n\t\t\t'Transaction(uint256 txType,uint256 from,uint256 to,uint256 ergsLimit,uint256 ergsPerPubdataByteLimit,uint256 maxFeePerErg,uint256 maxPriorityFeePerErg,uint256 paymaster,uint256 nonce,uint256 value,bytes data,bytes32[] factoryDeps,bytes paymasterInput)'\n\t\t);\n\n\tfunction isEthToken(uint256 _addr) internal pure returns (bool){\n\t\treturn _addr == uint256(uint160(address(ETH_TOKEN_SYSTEM_CONTRACT))) || _addr == 0;\n\t}\n\n\tfunction encodeHash(Transaction calldata _transaction) internal view returns (bytes32 resultHash) {\n\t\tif (_transaction.txType == LEGACY_TX_TYPE) {\n\t\t\tresultHash = _encodeHashLegacyTx(_transaction);\n\t\t} else if (_transaction.txType == EIP_712_TX_TYPE) {\n\t\t\tresultHash = _encodeHashEIP712Tx(_transaction);\n        } else if (_transaction.txType == EIP_1559_TX_TYPE) {\n            resultHash = _encodeHashEIP1559Tx(_transaction);\n        } else {\n\t\t\t// Currently no other transaction types are supported.\n\t\t\t// Any new transaction types will be processed in a similar manner.\n\t\t\trevert();\n\t\t}\n\t}\n\n\t/// @notice encode hash of the zkSync native transaction type.\n\t/// @return keccak256 of the EIP-712 encoded representation of transaction\n\tfunction _encodeHashEIP712Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                EIP712_TRANSACTION_TYPE_HASH,\n                _transaction.txType,\n                _transaction.from,\n                _transaction.to,\n                _transaction.ergsLimit,\n                _transaction.ergsPerPubdataByteLimit,\n                _transaction.maxFeePerErg,\n                _transaction.maxPriorityFeePerErg,\n                _transaction.paymaster,\n                _transaction.reserved[0],\n                _transaction.reserved[1],\n                keccak256(_transaction.data),\n                keccak256(abi.encodePacked(_transaction.factoryDeps)),\n                keccak256(_transaction.paymasterInput)\n\t\t\t)\n\t\t);\n\n\t\tbytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256('zkSync'), keccak256('2'), block.chainid));\n\n\t\treturn keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\t}\n\n\t/// @notice encode hash of the legacy transaction type.\n\t/// @return keccak256 of the serialized RLP encoded representation of transaction\n\tfunction _encodeHashLegacyTx(Transaction calldata _transaction) private view returns (bytes32) {\n\t\t// Hash of legacy transactions are encoded as one of the:\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data)\n\t\t//\n\t\t// In this RLP encoding, only one higher list appears, so we encode each element\n\t\t// inside list and then concatenate the length of all elements with them.\n\n\t\tbytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n\t\t// Encode `gasPrice` and `gasLimit` together to prevent \"stack too deep error\".\n\t\tbytes memory encodedGasParam;\n\t\t{\n\t\t\tbytes memory encodedGasPrice = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n\t\t\tbytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n\t\t\tencodedGasParam = bytes.concat(encodedGasPrice, encodedGasLimit);\n\t\t}\n\n\t\tbytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n\t\tbytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n\t\t// Encode only the length of the transaction data, and not the data itself,\n\t\t// so as not to copy to memory a potentially huge transaction data twice.\n\t\tbytes memory encodedDataLength;\n\t\t{\n\t\t\tuint256 txDataLen = _transaction.data.length;\n\t\t\tif (txDataLen != 1) {\n\t\t\t\t// If the length is not equal to one, then only using the length can it be encoded definitely.\n\t\t\t\tencodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n\t\t\t} else if (_transaction.data[0] >= 0x80) {\n\t\t\t\t// If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n\t\t\t\tencodedDataLength = hex'81';\n\t\t\t}\n\t\t\t// Otherwise the length is not encoded at all.\n\t\t}\n\n\t\t// Encode `chainId` according to EIP-155, but only if the `chainId` is specified in the transaction.\n\t\tbytes memory encodedChainId;\n\t\tif (_transaction.reserved[2] != 0) {\n\t\t\tencodedChainId = bytes.concat(RLPEncoder.encodeUint256(block.chainid), hex'80_80');\n\t\t}\n\n\t\tbytes memory encodedListLength;\n\t\tunchecked {\n\t\t\tuint256 listLength = encodedNonce.length +\n\t\t\t\tencodedGasParam.length +\n\t\t\t\tencodedTo.length +\n\t\t\t\tencodedValue.length +\n\t\t\t\tencodedDataLength.length +\n\t\t\t\t_transaction.data.length +\n\t\t\t\tencodedChainId.length;\n\n\t\t\tencodedListLength = RLPEncoder.encodeListLen(listLength);\n\t\t}\n\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tbytes.concat(\n\t\t\t\t\tencodedListLength,\n\t\t\t\t\tencodedNonce,\n\t\t\t\t\tencodedGasParam,\n\t\t\t\t\tencodedTo,\n\t\t\t\t\tencodedValue,\n\t\t\t\t\tencodedDataLength,\n\t\t\t\t\t_transaction.data,\n\t\t\t\t\tencodedChainId\n\t\t\t\t)\n\t\t\t);\n\t}\n\n    function _encodeHashEIP1559Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        // Hash of EIP1559 transactions is encoded the following way:\n        // H(0x02 || RLP(chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list))\n        // \n        // Note, that on zkSync access lists are not supported and should always be empty.\n\n        // Encode all fixed-length params to avoid \"stack too deep error\"\n        bytes memory encodedFixedLengthParams;\n        {\n            bytes memory encodedChainId = RLPEncoder.encodeUint256(block.chainid);\n            bytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n            bytes memory encodedMaxPriorityFeePerGas = RLPEncoder.encodeUint256(_transaction.maxPriorityFeePerErg);\n            bytes memory encodedMaxFeePerGas = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n            bytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n            bytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n            bytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n            encodedFixedLengthParams = bytes.concat(\n                encodedChainId, \n                encodedNonce, \n                encodedMaxPriorityFeePerGas, \n                encodedMaxFeePerGas, \n                encodedGasLimit, \n                encodedTo, \n                encodedValue\n            );\n        }\n\n        // Encode only the length of the transaction data, and not the data itself,\n        // so as not to copy to memory a potentially huge transaction data twice.\n        bytes memory encodedDataLength;\n        {\n            uint256 txDataLen = _transaction.data.length;\n            if (txDataLen != 1) {\n                // If the length is not equal to one, then only using the length can it be encoded definitely.\n                encodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n            } else if (_transaction.data[0] >= 0x80) {\n                // If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n                encodedDataLength = hex'81';\n            }\n            // Otherwise the length is not encoded at all.\n        }\n\n        // On zkSync, access lists are always zero length (at least for now).\n        bytes memory encodedAccessListLength = RLPEncoder.encodeListLen(0);\n\n        bytes memory encodedListLength;\n        unchecked {\n            uint256 listLength = \n                encodedFixedLengthParams.length +\n                encodedDataLength.length +\n                _transaction.data.length +\n                encodedAccessListLength.length;\n\n            encodedListLength = RLPEncoder.encodeListLen(listLength);\n        }\n\n        return\n            keccak256(\n                bytes.concat(\n                    '\\x02',\n                    encodedListLength,\n                    encodedFixedLengthParams,\n                    encodedDataLength,\n                    _transaction.data,\n                    encodedAccessListLength\n                )\n            );\n    }\n\n\tfunction processPaymasterInput(Transaction calldata _transaction) internal {\n\t\trequire(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\n\n\t\tbytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\n\t\tif (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n\t\t\t// While the actual data consists of address, uint256 and bytes data, \n\t\t\t// the data is needed only for the paymaster, so we ignore it here for the sake of optimization\n\t\t\t(address token, uint256 minAllowance) = abi.decode(_transaction.paymasterInput[4:68], (address, uint256));\n\t\t\taddress paymaster = address(uint160(_transaction.paymaster));\n\n\t\t\tuint256 currentAllowance = IERC20(token).allowance(address(this), paymaster);\n\t\t\tif (currentAllowance < minAllowance) {\n\t\t\t\t// Some tokens, e.g. USDT require that the allowance is firsty set to zero \n\t\t\t\t// and only then updated to the new value.\n\t\t\t\t\n\t\t\t\tIERC20(token).approve(paymaster, 0);\n\t\t\t\tIERC20(token).approve(paymaster, minAllowance);\n\t\t\t}\n\t\t} else if (paymasterInputSelector == IPaymasterFlow.general.selector) {\n\t\t\t// Do nothing. General(bytes) paymaster flow means that the paymaster must interpret these bytes on his own.\n\t\t} else {\n\t\t\trevert(\"Unsupported paymaster flow\");\n\t\t}\n\t}\n\n\tfunction payToTheBootloader(Transaction calldata _transaction) internal returns (bool success){\n\t\taddress bootloaderAddr = BOOTLOADER_FORMAL_ADDRESS;\n\t\tuint256 amount = _transaction.maxFeePerErg * _transaction.ergsLimit;\n\n\t\tassembly {\n\t\t\tsuccess := call(\n\t\t\t\tgas(),\n\t\t\t\tbootloaderAddr,\n\t\t\t\tamount,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t}\n\t}\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAccountCodeStorage.sol\";\nimport \"./interfaces/INonceHolder.sol\";\nimport \"./interfaces/IContractDeployer.sol\";\nimport \"./interfaces/IKnownCodesStorage.sol\";\nimport \"./interfaces/IImmutableSimulator.sol\";\nimport \"./interfaces/IEthToken.sol\";\nimport \"./interfaces/IL1Messenger.sol\";\nimport \"./interfaces/ISystemContext.sol\";\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\nuint160 constant MAX_SYSTEM_CONTRACT_ADDRESS = 0xffff; // 2^16 - 1\n\naddress constant ECRECOVER_SYSTEM_CONTRACT = address(0x01);\naddress constant SHA256_SYSTEM_CONTRACT = address(0x02);\n\naddress payable constant BOOTLOADER_FORMAL_ADDRESS = payable(address(SYSTEM_CONTRACTS_OFFSET + 0x01));\nIAccountCodeStorage constant ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT = IAccountCodeStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x02));\nINonceHolder constant NONCE_HOLDER_SYSTEM_CONTRACT = INonceHolder(address(SYSTEM_CONTRACTS_OFFSET + 0x03));\nIKnownCodesStorage constant KNOWN_CODE_STORAGE_CONTRACT = IKnownCodesStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x04));\nIImmutableSimulator constant IMMUTABLE_SIMULATOR_SYSTEM_CONTRACT = IImmutableSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x05));\nIContractDeployer constant DEPLOYER_SYSTEM_CONTRACT = IContractDeployer(address(SYSTEM_CONTRACTS_OFFSET + 0x06));\n\n// A contract that is allowed to deploy any codehash\n// on any address. To be used only during an upgrade.\naddress constant FORCE_DEPLOYER = address(SYSTEM_CONTRACTS_OFFSET + 0x07);\nIL1Messenger constant L1_MESSENGER_CONTRACT = IL1Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\naddress constant MSG_VALUE_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\n\nIEthToken constant ETH_TOKEN_SYSTEM_CONTRACT = IEthToken(address(SYSTEM_CONTRACTS_OFFSET + 0x0a));\n\naddress constant KECCAK256_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x10);\n\nISystemContext constant SYSTEM_CONTEXT_CONTRACT = ISystemContext(payable(address(SYSTEM_CONTRACTS_OFFSET + 0x0b)));\n\nbytes32 constant DEFAULT_ACCOUNT_CODE_HASH = 0x00;\n\n// The number of bytes that are published during the contract deployment\n// in addition to the bytecode itself.\nuint256 constant BYTECODE_PUBLISHING_OVERHEAD = 100;\n\nuint256 constant MSG_VALUE_SIMULATOR_IS_SYSTEM_BIT = 2**128;\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev The interface that is used for encoding/decoding of \n * different types of paymaster flows.\n * @notice This is NOT an interface to be implementated\n * by contracts. It is just used for encoding.\n */\ninterface IPaymasterFlow {\n    function general(bytes calldata input) external;\n    function approvalBased(address _token, uint256 _minAllowance, bytes calldata _innerInput) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\nenum ExecutionResult {\n\tRevert,\n\tSuccess\n}\n\ninterface IPaymaster {\n\tfunction validateAndPayForPaymasterTransaction(\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash,\n\t\tTransaction calldata _transaction\n\t) external payable returns (bytes memory context);\n\n\t/// @dev Called by the bootloader after the execution of the transaction. Please note that \n\t/// there is no guarantee that this method will be called at all. Unlike the original EIP4337, \n\t/// this method won't be called if the transaction execution results in out-of-gas.\n\t/// @param _context, the context of the execution, returned by the \"validateAndPayForPaymasterTransaction\" method.\n\t/// @param  _transaction, the users' transaction.\n\t/// @param _txResult, the result of the transaction execution (success or failure).\n\t/// @param _maxRefundedErgs, the upper bound on the amout of ergs that could be refunded to the paymaster. \n\t/// @dev The exact amount refunded depends on the ergs spent by the \"postOp\" itself and so the developers should \n\t/// take that into account.\n\tfunction postOp(\n\t\tbytes calldata _context,\n\t\tTransaction calldata _transaction,\n\t\tbytes32 _txHash,\n\t\tbytes32 _suggestedSignedHash,\n\t\tExecutionResult _txResult,\n\t\tuint256 _maxRefundedErgs\n\t) external payable;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nlibrary RLPEncoder {\n\tfunction encodeAddress(address _val) internal pure returns (bytes memory encoded) {\n\t\t// The size is equal to 14 bytes of the address itself + 1 for encoding bytes length in RLP.\n\t\tencoded = new bytes(0x15);\n\n\t\tbytes20 shiftedVal = bytes20(_val);\n\t\tassembly {\n\t\t\t// In the first byte we write the encoded length as 0x80 + 0x14 == 0x94.\n\t\t\tmstore(add(encoded, 0x20), 0x9400000000000000000000000000000000000000000000000000000000000000)\n\t\t\t// Write address data without stripping zeros.\n\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t}\n\t}\n\n\tfunction encodeUint256(uint256 _val) internal pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_val < 128) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\t// Handle zero as a non-value, since stripping zeroes results in an empty byte array\n\t\t\t\tencoded[0] = (_val == 0) ? bytes1(uint8(128)) : bytes1(uint8(_val));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_val);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(hbs + 0x81));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _val << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Encodes the size of bytes in RLP format.\n\t/// NOTE: panics if the length is 1, since the length encoding is ambiguous in this case.\n\tfunction encodeNonSingleBytesLen(uint256 _len) internal pure returns (bytes memory) {\n\t\tassert(_len != 1);\n\t\treturn _encodeLength(_len, 0x80);\n\t}\n\n\t/// @notice Encodes the size of list items in RLP format.\n\tfunction encodeListLen(uint256 _len) internal pure returns (bytes memory) {\n\t\treturn _encodeLength(_len, 0xc0);\n\t}\n\n\tfunction _encodeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_len < 56) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\tencoded[0] = bytes1(uint8(_len + _offset));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_len);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(_offset + hbs + 56));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _len << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Computes the index of the highest byte set in number.\n\t/// @notice Uses little endian ordering (The least significant byte has index `0`).\n\t/// NOTE: returns `0` for `0`\n\tfunction _highestByteSet(uint256 _number) private pure returns (uint256 hbs) {\n\t\t// TODO: for optimization, the comparison can be replaced with bitwise operations\n\t\t// should be resolver after evaluating the cost of opcodes.\n\t\tif (_number >= 2**128) {\n\t\t\t_number >>= 128;\n\t\t\thbs += 16;\n\t\t}\n\t\tif (_number >= 2**64) {\n\t\t\t_number >>= 64;\n\t\t\thbs += 8;\n\t\t}\n\t\tif (_number >= 2**32) {\n\t\t\t_number >>= 32;\n\t\t\thbs += 4;\n\t\t}\n\t\tif (_number >= 2**16) {\n\t\t\t_number >>= 16;\n\t\t\thbs += 2;\n\t\t}\n\t\tif (_number >= 2**8) {\n\t\t\thbs += 1;\n\t\t}\n\t}\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev Interface of the nonce holder contract -- a contract used by the system to ensure\n * that there is always a unique identifier for a transaction with a particular account (we call it nonce).\n * In other words, the pair of (address, nonce) should always be unique.\n * @dev Custom accounts should use methods of this contract to store nonces or other possible unique identifiers \n * for the transaction.\n */\ninterface INonceHolder {\n    /// @dev Returns the current minimal nonce for account.\n    function getMinNonce(address _address) external view returns(uint256);\n\n    /// @dev Returns the raw version of the current minimal nonce \n    /// (equal to minNonce + 2^128 * deployment nonce).\n    function getRawNonce(address _address) external view returns (uint256);\n\n    /// @dev Increases the minimal nonce for the msg.sender.\n    function increaseMinNonce(uint256 _value) external returns (uint256);\n\n    /// @dev Sets the nonce value `key` as used.\n    function setValueUnderNonce(uint256 _key, uint256 _value) external;\n\n    /// @dev Gets the value stored inside a custom nonce.\n    function getValueUnderNonce(uint256 _key) external view returns (uint256);\n\n    /// @dev A convenience method to increment the minimal nonce if it is equal\n    /// to the `_expectedNonce`.\n    function incrementMinNonceIfEquals(uint256 _expectedNonce) external;\n\n    /// @dev Returns the deployment nonce for the accounts used for CREATE opcode.\n    function getDeploymentNonce(address _address) external view returns (uint256);\n\n    /// @dev Increments the deployment nonce for the account and returns the previous one.\n    function incrementDeploymentNonce(address _address) external returns (uint256);\n\n    /// @dev Determines whether a certain nonce has been already used for an account.\n    function validateNonceUsage(address _address, uint256 _key, bool _shouldBeUsed) external view;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IContractDeployer {\n    event ContractDeployed(address indexed deployerAddress, bytes32 indexed bytecodeHash, address indexed contractAddress);\n\n    function getNewAddressCreate2(\n        address _sender,\n        bytes32 _bytecodeHash,\n        bytes32 _salt,\n        bytes calldata _input\n    ) external pure returns (address newAddress);\n \n    function getNewAddressCreate(\n        address _sender,\n        uint256 _senderNonce\n    ) external pure returns (address newAddress);\n\n    function create2 (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    function create2Account (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While the `_salt` parameter is not used anywhere here, \n    /// it is still needed for consistency between `create` and\n    /// `create2` functions (required by the compiler).\n    function create (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While `_salt` is never used here, we leave it here as a parameter\n    /// for the consistency with the `create` function.\n    function createAccount (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external payable returns (address newAddress, bytes memory constructorRevertData);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nstruct ImmutableData {\n    uint256 index;\n    bytes32 value;\n}\n\ninterface IImmutableSimulator {\n    function getImmutable(address _dest, uint256 _index) external view returns (bytes32);\n\n    function setImmutables(address _dest, ImmutableData[] calldata immutables) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IKnownCodesStorage {\n    event MarkedAsKnown(bytes32 indexed bytecodeHash, bool indexed sendBytecodeToL1);\n\n    function markFactoryDeps(bool _shouldSendToL1, bytes32[] calldata _hashes) external;\n\n    function getMarker(bytes32 _hash) external view returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IAccountCodeStorage {\n    function storeCodeHash(address _address, bytes32 _hash) external;\n\n    function getRawCodeHash(address _address) external view returns (bytes32 codeHash);\n\n    function getCodeHash(uint256 _input) external returns (bytes32 codeHash);\n    \n    function getCodeSize(uint256 _input) external returns (uint256 codeSize);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IL1Messenger {\n    // Possibly in the future we will be able to track the messages sent to L1 with \n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\n\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IEthToken {\n    function balanceOf(address) external returns (uint256);\n    \n    function transferFromTo(address _from, address _to, uint256 _amount) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/ISystemContext.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @notice Contract that stores some of the context variables, that may be either \n * block-scoped, tx-scoped or system-wide.\n */\ninterface ISystemContext {\n    function chainId() external view returns (uint256);\n\n    function origin() external view returns (address);\n\n    function ergsPrice() external view returns (uint256);\n\n    function blockErgsLimit() external view returns (uint256);\n\n    function coinbase() external view returns (address);\n\n    function difficulty() external view returns (uint256);\n\n    function msize() external view returns (uint256);\n\n    function baseFee() external view returns (uint256);\n\n    function blockHash(uint256 _block) external view returns (bytes32);\n\n    function getBlockHashEVM(uint256 _block) external view returns (bytes32);\n\n    function getBlockNumberAndTimestamp() external view returns (uint256 blockNumber, uint256 blockTimestamp);\n\n    // Note, that for now, the implementation of the bootloader allows this variables to \n    // be incremented multiple times inside a block, so it should not relied upon right now.\n    function getBlockNumber() external view returns (uint256);\n\n    function getBlockTimestamp() external view returns (uint256);\n}\n"}},"settings":{"optimizer":{"enabled":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyPaymaster.sol:27:52:\n   |\n27 |  ... idateAndPayForPaymasterTransaction(bytes32 _txHash, bytes32 _suggestedSignedHash, Tra ...\n   |                                         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyPaymaster.sol","start":1024,"end":1039},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyPaymaster.sol:27:69:\n   |\n27 |  ... masterTransaction(bytes32 _txHash, bytes32 _suggestedSignedHash, Transaction calldata _transaction ...\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyPaymaster.sol","start":1041,"end":1069},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyPaymaster.sol:27:184:\n   |\n27 |  ... e override onlyBootloader returns (bytes memory context) {\n   |                                         ^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyPaymaster.sol","start":1156,"end":1176},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/MyPaymaster.sol:32:51:\n   |\n32 |             (address token, uint256 minAllowance, bytes memory data) = abi.decode(_transaction.paymasterInput[4:], (address, uint256, bytes));\n   |                                                   ^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"file":"contracts/MyPaymaster.sol","start":1517,"end":1534},"type":"Warning"}],"version":"0.8.16","long_version":"0.8.16+commit.07a7930e.Linux.g++","zk_version":"1.2.0","sources":{},"contracts":{"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"RLPEncoder":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"TransactionHelper":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"IAccountCodeStorage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeSize","outputs":[{"internalType":"uint256","name":"codeSize","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"storeCodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"IContractDeployer":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2Account","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"createAccount","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"IEthToken":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFromTo","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"IImmutableSimulator":{"abi":[{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getImmutable","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct ImmutableData[]","name":"immutables","type":"tuple[]"}],"name":"setImmutables","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"IKnownCodesStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"bool","name":"sendBytecodeToL1","type":"bool"}],"name":"MarkedAsKnown","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"getMarker","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_shouldSendToL1","type":"bool"},{"internalType":"bytes32[]","name":"_hashes","type":"bytes32[]"}],"name":"markFactoryDeps","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"IL1Messenger":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"INonceHolder":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"}],"name":"getValueUnderNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"increaseMinNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"incrementDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_expectedNonce","type":"uint256"}],"name":"incrementMinNonceIfEquals","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"setValueUnderNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_key","type":"uint256"},{"internalType":"bool","name":"_shouldBeUsed","type":"bool"}],"name":"validateNonceUsage","outputs":[],"stateMutability":"view","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"IPaymaster":{"abi":[{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"IPaymasterFlow":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/ISystemContext.sol":{"ISystemContext":{"abi":[{"inputs":[],"name":"baseFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockErgsLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"coinbase","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"difficulty","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ergsPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"getBlockHashEVM","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumberAndTimestamp","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"010002730a5e409221fcfc87f30341f74a83b825b5cddc045a53b69d9787902a"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[]}},"contracts/CharityToken.sol":{"CharityToken":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"010002a55c7b0c6a34c0c896cb621ddb76e2f80a7088871b306fc13f73ec76d1"}},"contracts/MyPaymaster.sol":{"MyPaymaster":{"abi":[{"inputs":[{"internalType":"address","name":"_erc20","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"allowedToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_suggestedSignedHash","type":"bytes32"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"0004000000000002000200000001035500000060031002700000013f0030019d0000013f03300197000000000131034f000300000001035500000060011002700001013f0010019d000000010120018f000000000110004c0000000d0000c13d04f600630000040f04f6000e0000040f00010000000000020000000001000416000000000110004c0000001f0000c13d00000000010000310000009f02100039000000200300008a000000000232016f0000007f0320008c000000210000213d000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f8000104300000000001000019000004f800010430000000400300003900000000002304350000001f0210018f00000002030003670000000504100270000000000540004c000000310000613d00000000050000190000000506500210000000000763034f000000000707043b000000800660003900000000007604350000000105500039000000000645004b000000290000413d000000000520004c000000400000613d0000000504400210000000000343034f00000003022002100000008004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f000000000024043500000140020000410000001f0310008c000000000300001900000000030220190000014001100197000000000410004c0000000002008019000001400110009c00000000010300190000000001026019000000000110004c0000004e0000c13d0000000001000019000004f80001043000000080010000390000000002010433000001410120009c000000540000413d0000000001000019000004f8000104300000000001000019000100000002001d04f604f40000040f00000142011001970000000102000029000000000121019f000000000200001904f604f20000040f000000200100003900000100020000390000000000120439000001200100003900000000000104390000014301000041000004f70001042e0019000000000002000000000a0004110000000001000410000300000001001d000080020110008c000000800000613d0000800101a0008c000000800000613d00060000000a001d00000146010000410000000000100439000000040100003900000003020000290000000000210439000001470100004100008002020000390000000003000415000000190330008a00000020033000c904f604c00000040f000000ff01000039000000180110024f000000000110004c000003650000613d000000190100035f000000000101043b000000000110004c000000060a000029000003670000613d0000008006000039000000400500003900000000006504350000000002000031000000030120008c000002fc0000a13d001700000000001d0000000201000367000000000301043b000000e003300270000001480430009c000200000005001d0000026a0000c13d000000040220008a00000140030000410000005f0420008c000000000400001900000000040320190000014005200197000000000650004c0000000003008019000001400550009c000000000304c019000000000330004c000003020000613d0000004401100370000000000501043b0000014b0150009c000003040000813d000000000152004900000140020000410000025f0310008c000000000300001900000000030220190000014001100197000000000410004c0000000002008019000001400110009c00000000010300190000000001026019000000000110004c000003060000613d0000000401500039000600000001001d0000800101a0008c00000000010000190000000101006039000400000005001d04f6045c0000040f001500000000001d001600000000001d000000040100002900000224031000390000000001000415000000160110008a00000020011000c90000000602000029000500000003001d04f604730000040f0000001501000029000000030110008c000003080000a13d001300000000001d001400000000001d0000000001000415000000140110008a00000020011000c90000000602000029000000050300002904f604730000040f0000001301000029000000030110008c0000031c0000a13d00000002010003670000001401100360000000000101043b0000014c011001970000014d0110009c000003200000c13d001100000000001d001200000000001d0000000001000415000000120110008a00000020011000c90000000602000029000000050300002904f604730000040f0000001101000029000000030210008c000000de0000213d0000013f01000041000000170110017f00000153211000d1000004f800010430000000120a000029000000040210008a00000140030000410000005f0420008c000000000400001900000000040320190000014002200197000000000520004c0000000003008019000001400220009c00000000020400190000000002036019000000000220004c000000f00000c13d0000013f01000041000000170110017f00000153211000d1000004f8000104300000000402a000390000000204000367000000000224034f000000000202043b0000015209200197000001410220009c000000fb0000413d0000013f01000041000000170110017f00000153211000d1000004f8000104300000004402a00039000000000224034f000000000302043b0000014b0230009c000001040000413d0000013f01000041000000170110017f00000153211000d1000004f8000104300000000002a100190000000003a3001900000023013000390000014005000041000000000621004b0000000006000019000000000605401900000140011001970000014007200197000000000871004b000000000500a019000000000171013f000001400110009c00000000010600190000000001056019000000000110004c000001210000613d0000000401300039000000000114034f000000000101043b0000014b0410009c000001250000413d000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f8000104300000013f01000041000000170110017f00000153211000d1000004f8000104300000003f04100039000000200500008a000000000454016f000000020800002900000000050804330000000004450019000000000654004b00000000060000190000000106004039000001540740009c0000013d0000213d000000010660018f000000000660004c0000013d0000c13d0000000000480435000000000015043500000024033000390000000004130019000000000224004b000001440000a13d0000013f01000041000000170110017f00000153211000d1000004f800010430000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f8000104300000000202000367000000000432034f0000001f0310018f00000020025000390000000505100270000000000650004c000001540000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b0000014c0000413d00050000000a001d000600000009001d000000000630004c000001650000613d0000000505500210000000000454034f00000000055200190000000303300210000000000605043300000000063601cf000000000636022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000363019f0000000000350435000000000112001900000017020000290000000000210435000000170100002904f604f40000040f00000152011001970000000607000029000000000117004b000001860000c13d000000050100002900000024021000390000000201000367000000000221034f000000000202043b000000000220004c0000000205000029000001970000c13d00000000010504330000004402100039000001660300004100000000003204350000002402100039000000150300003900000000003204350000014f0200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000001500110019700000151011001c7000004f8000104300000000201000029000000000101043300000044021000390000015503000041000000000032043500000024021000390000000d0300003900000000003204350000014f0200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000001500110019700000151011001c7000004f80001043000000004060000290000002402600039000000000121034f000000000101043b000000000a0504330000002402a0003900000003030000290000000000320435000001560200004100000000002a043500000152091001970000000401a0003900000000009104350000000001000414000000040270008c000001a90000c13d0000000104000031000001d20000013d000500000009001d000000c00110021000000157011001970000004002a002100000015002200197000000000112019f00000158011001c70000000003000415000000100330008a00000020033000c9000000000207001900010000000a001d04f604c00000040f000000010a000029000000ff010000390000000f0210024f000000100100035f0000000003000019000000050430021000000000054a0019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000001bb0000c13d000300000001035500000060031002700001013f0030019d0000013f04300197000000000220004c0000000205000029000000040600002900000006070000290000000509000029000001f80000613d0000001701000029000000200240008c000000200200003900000000020440190000001f03200039000000600330018f0000000008a30019000000000338004b00000000030000190000000103004039000001540480009c000001f10000213d000000010330018f000000000330004c000001f10000c13d00000000008504350000014003000041000000200420008c000000000400001900000000040340190000014002200197000000000520004c000000000300a019000001400220009c00000000020400190000000002036019000000000220004c0000021d0000613d0000013f0110019700000153211000d1000004f800010430000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f8000104300000001f0240018f000000170310036000000000010504330000000504400270000000000540004c000002070000613d000000000500001900000005065002100000000007610019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000001ff0000413d000000000520004c000002160000613d0000000504400210000000000343034f00000000044100190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f000000000024043500000040011002100000015001100197000000600200003900000001022001ff0000015902200197000000000112019f000004f80001043000000000020a0433000000000220004c000002320000c13d0000006401800039000001640200004100000000002104350000004401800039000001650200004100000000002104350000002401800039000000290200003900000000002104350000014f0100004100000000001804350000000401800039000000200200003900000000002104350000004001800210000001500110019700000160011001c7000004f80001043000000064026000390000000203000367000000000223034f000000a404600039000000000343034f000000000403043b000000000502043b000000000250004c000002490000613d000000010200008a00000000325200d9000000000224004b000002490000a13d00000144020000410000000000210435000000110100003900000004020000390000000000120435000000020100002900000017011001ef000001500110019700000145011001c7000004f800010430000100000005001d000400000004001d0000004401800039000000010200003900000000002104350000002401800039000000030200002900000000002104350000015a010000410000000000180435000500000008001d000000040180003900000000009104350000000001000414000000040270008c0000027d0000c13d0000000104000031000000200140008c000000200100003900000000010440190000001f02100039000000600220018f000000050300002900000000023200190000014b0320009c000002a50000413d000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f800010430000600000006001d000001490430009c000003310000613d0000014a0330009c000003000000c13d000000040320008a0000014004000041000000bf0530008c000000000500001900000000050420190000014006300197000000000760004c0000000004008019000001400660009c000000000405c019000000000440004c000003690000c13d0000000001000019000004f8000104300000001703000029000000c0011002100000015701100197000000050200002900000040022002100000015002200197000000000112019f000000000230004c000002b70000c13d00000151011001c700000000030004150000000c0330008a00000020033000c9000000060200002904f604a70000040f000000ff010000390000000b0210024f0000000c0100035f0000000003000019000000050600002900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000002910000c13d000300000001035500000060031002700001013f0030019d0000013f04300197000000000220004c0000025a0000c13d000002d60000013d0000000203000029000000000023043500000140020000410000001f0310008c000000000300001900000000030220190000014001100197000000000410004c0000000002008019000001400110009c00000000010300190000000001026019000000000110004c000003450000c13d0000013f01000041000000170110017f00000153211000d1000004f8000104300000015b011001c7000080090200003900000000050004150000000e0550008a00000020055000c9000000060400002904f604d90000040f000000ff010000390000000d0210024f0000000e0100035f0000000003000019000000050600002900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000002c30000c13d000300000001035500000060031002700001013f0030019d0000013f04300197000000000220004c0000025a0000c13d0000001f0240018f0000001703100360000000020100002900000000010104330000000504400270000000000540004c000002e60000613d000000000500001900000005065002100000000007610019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000002de0000413d000000000520004c000002f50000613d0000000504400210000000000343034f00000000044100190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f000000000024043500000040011002100000015001100197000000600200003900000001022001ff0000015902200197000000000112019f000004f800010430000000000120004c000003000000c13d0000000001000019000004f70001042e0000000001000019000004f8000104300000000001000019000004f8000104300000000001000019000004f8000104300000000001000019000004f8000104300000000201000029000000000101043300000064021000390000016703000041000000000032043500000044021000390000016803000041000000000032043500000024021000390000003a0300003900000000003204350000014f0200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000001500110019700000160011001c7000004f8000104300000013f01000041000000170110017f00000153211000d1000004f8000104300000000201000029000000000101043300000044021000390000014e03000041000000000032043500000024021000390000001a0300003900000000003204350000014f0200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000001500110019700000151011001c7000004f8000104300000000001000416000000000110004c0000036f0000c13d000000040120008a000000010200008a0000014003000041000000000221004b000000000200001900000000020320190000014001100197000001400410009c00000000030080190000014001100167000001400110009c00000000010200190000000001036019000000000110004c000003750000c13d0000000001000019000004f80001043000000005010000290000000001010433000000000210004c0000000002000019000000010200c039000000000121004b000003710000c13d0000000401000029000000010200002900000000132100a90000000001000414000000c00110021000000157011001970000001702000029000600000002001d000000600220021000000159022001970000000204000029000000000404043300000040044002100000015004400197000000000530004c000003920000c13d000000000114019f000000000121019f000080010200003900000000030004150000000a0330008a00000020033000c9000500000003001d04f604a70000040f0000039c0000013d0000000001000019000004f8000104300000000001000019000004f70001042e0000000404100370000000000404043b0000014b0540009c0000037c0000413d0000000001000019000004f8000104300000000001000019000004f8000104300000013f01000041000000170110017f00000153211000d1000004f800010430000000000100001904f604f40000040f0000015201100197000000060200002900000000001204350000016901000041000004f70001042e00000023054000390000014006000041000000000725004b0000000007000019000000000706401900000140082001970000014005500197000000000985004b000000000600a019000000000585013f000001400550009c00000000050700190000000005066019000000000550004c000004290000613d0000000405400039000000000551034f000000000505043b0000014b0650009c000004320000413d0000000001000019000004f800010430000000000141019f000000000121019f0000015c011001c7000080090200003900008001040000390000000005000415000000080550008a00000020055000c9000500000005001d04f604d90000040f00000006080000290000001f0380018f000000ff010000390000000502000029000000200220011a000000010112025f00000000020203670000000504800270000000000540004c000003af0000613d000000000500001900000005065002100000000007680019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b000003a70000413d000000000530004c000003bf0000613d0000000504400210000000000542034f000000060600002900000000044600190000000303300210000000000604043300000000063601cf000000000636022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000363019f0000000000340435000300000002035500000060022002700001013f0020019d0000013f02200197000000000320004c000003e60000c13d00000002020000290000000002020433000000000110004c000004170000613d00000020010000390000000000120435000000600100003900000000010104330000002003200039000000000013043500000040032000390000001704000029000000000514004b000003db0000813d00000000054300190000008006400039000000000606043300000000006504350000002004400039000000000514004b000003d30000413d0000001704000029000000000313001900000000004304350000004002200210000001500220019700000060011002100000016101100041000001620110019700000163011000410000016201100197000000000121019f000004f70001042e000000020300002900000000030304330000003f042000390000015d044001970000000004430019000000000534004b00000000050000190000000105004039000001540640009c0000042b0000213d000000010550018f000000000550004c0000042b0000c13d000000020500002900000000004504350000000000230435000000200230003900000001050000310000001f0350018f000000030400036700000017044003600000000505500270000000000650004c000004070000613d000000000600001900000005076002100000000008720019000000000774034f000000000707043b00000000007804350000000106600039000000000756004b000003ff0000413d000000000630004c000003c50000613d0000000505500210000000000454034f00000000025200190000000303300210000000000502043300000000053501cf000000000535022f000000000404043b0000010003300089000000000434022f00000000033401cf000000000353019f0000000000320435000003c50000013d00000064012000390000015e03000041000000000031043500000044012000390000015f03000041000000000031043500000024012000390000002a0300003900000000003104350000014f0100004100000000001204350000000401200039000000200300003900000000003104350000004001200210000001500110019700000160011001c7000004f8000104300000000001000019000004f800010430000001440100004100000000001004350000004101000039000000040200003900000000001204350000014501000041000004f80001043000000000045400190000002404400039000000000224004b000004380000a13d0000000001000019000004f8000104300000002402100370000000000202043b0000014b0420009c0000043e0000413d0000000001000019000004f800010430000000000223004900000140030000410000025f0420008c000000000400001900000000040320190000014002200197000000000520004c0000000003008019000001400220009c00000000020400190000000002036019000000000220004c0000044d0000c13d0000000001000019000004f8000104300000008401100370000000000101043b000000020110008c000004530000413d0000000001000019000004f8000104300000800101a0008c0000000001000019000000010100603904f6045c0000040f0000000201000029000000000101043300000040011002100000015001100197000004f70001042e000000000110004c0000045f0000613d000000000001042d0000004001000039000000000101043300000064021000390000016a03000041000000000032043500000044021000390000016b0300004100000000003204350000002402100039000000240300003900000000003204350000014f0200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000001500110019700000160011001c7000004f800010430000000000400003100000000052400490000001f0650008a0000000205000367000000000335034f000000000303043b0000014007000041000000000863004b0000000008000019000000000807401900000140066001970000014009300197000000000a69004b000000000700a019000000000669013f000001400660009c00000000060800190000000006076019000000000660004c000004a10000613d0000000002230019000000000325034f000000000303043b000000200510011a000100000503001f0000014b0530009c000004a30000813d000000200510011a000000200520003f000000000334004900000020022000390000014004000041000000000532004b0000000005000019000000000504a01900000140033001970000014002200197000000000632004b000000000400a019000000000232013f000001400220009c00000000020500190000000002046019000000000220004c000004a50000613d000000000001042d0000000001000019000004f8000104300000000001000019000004f8000104300000000001000019000004f8000104300002000000000002000200000003001d0000002003300039000100000003001d000004b6002104210000000203000029000000200230011a000000000201035500000140010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000016c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000003001d0000002003300039000100000003001d000004cf002104230000000203000029000000200230011a000000000201035500000140010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000016c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000005001d0000002005500039000100000005001d000004e8002104210000000203000029000000200230011a000000000201035500000140010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000016c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d000004f600000432000004f70001042e000004f80001043000000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff80000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000f6a5ca200000000000000000000000000000000000000000000000000000000085fa292f00000000000000000000000000000000000000000000000000000000a159ebd00000000000000000000000000000000000000000000000010000000000000000ffffffff00000000000000000000000000000000000000000000000000000000949431dc00000000000000000000000000000000000000000000000000000000556e737570706f72746564207061796d617374657220666c6f7700000000000008c379a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff496e76616c696420746f6b656e00000000000000000000000000000000000000dd62ed3e0000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000023b872dd000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000064000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffe0626f6f746c6f61646572000000000000000000000000000000000000000000004661696c656420746f207472616e736665722066756e647320746f20746865200000000000000000000000000000000000000084000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000ffffffe00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000616c6c6f77616e63650000000000000000000000000000000000000000000000546865207573657220646964206e6f742070726f7669646520656e6f756768204d696e20616c6c6f77616e636520746f6f206c6f77000000000000000000000074206265206174206c656173742034206279746573206c6f6e67000000000000546865207374616e64617264207061796d617374657220696e707574206d7573000000000000000000000000000000000000002000000080000000000000000074686f64000000000000000000000000000000000000000000000000000000004f6e6c7920626f6f746c6f616465722063616e2063616c6c2074686973206d657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}},"factoryDependencies":{},"hash":"0100016d10a105c0a74cc72ae6de81e4142c8bfccfaedf7d233e02fe31772c80"}}}}}